name: 'shim Auto Review bot'
description: 'shim Auto Review bot'
inputs:
  comment-file:
    description: 'comment body file'
    required: false
  config-file:
    description: 'config file'
    required: false
    default: "/tmp/config.yaml"
  issue-repository:
    description: 'issue repository'
    required: false
    default: "${{ github.repository }}"
  issue-number:
    description: 'issue number'
    required: false
  source:
    description: "source git repository"
    required: true
  build-script:
    description: 'build script'
    required: false
  output-file:
    description: 'generated by build-script output file path'
    required: false
  vendor-cert:
    description: 'vendor cert file'
    required: false
  sbat:
    description: 'sbat file'
    required: false
  report-output:
    description: 'review file output path'
    required: false
runs:
  using: "composite"
  steps:
    - run: |
        echo "${{ github.action_path }}" >> $GITHUB_PATH
        chmod +x ${{ github.action_path }}/shim-review-bot
      shell: bash
    - name: Create Comment
      id: comment
      if: inputs.issue-number != ''
      uses: peter-evans/create-or-update-comment@v3.0.2
      with:
        issue-number: "${{ inputs.issue-number }}"
        body: |
          **Disclaimer: I am not a not an authorized reviewer. Automatic reproduction check bot (https://github.com/jc-lab/shim-review-bot).**
          Job URL : ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

    - name: parse-comment
      if: inputs.comment-file != ''
      shell: bash
      run: |
        shim-review-bot parse-comment --config "${{ inputs.config-file }}" --comment-file "${{ inputs.comment-file }}"
        cat "${{ inputs.config-file }}"
    - name: setup-buildx
      uses: docker/setup-buildx-action@v3
    - id: clone
      shell: bash
      run: |
        if [ -f "${{ inputs.config-file }}" ]; then
          shim-review-bot download --config "${{ inputs.config-file }}" --source "${{ inputs.source }}" --dest "/tmp/source" > /tmp/working-directory.txt
        else
          shim-review-bot download --source "${{ inputs.source }}" --dest "/tmp/source" > /tmp/working-directory.txt
        fi
    - id: review
      shell: bash
      run: |
        [ -n "${{ inputs.output-file }}" ] && export BUILD_OUTPUT_FILE="${{ inputs.output-file }}" || export BUILD_OUTPUT_FILE="output.tar"
        [ -n "${{ inputs.build-script }}" ] && BUILD_SCRIPT="${{ inputs.build-script }}" || BUILD_SCRIPT="${{ github.action_path }}/default-build-script.sh"
        [ -n "${{ inputs.vendor-cert }}" ] && export VENDOR_CERT="${{ inputs.vendor-cert }}" || export VENDOR_CERT="vendor_cert.der"
        [ -n "${{ inputs.sbat }}" ] && export SBAT_FILE="${{ inputs.sbat }}" || export SBAT_FILE="sbat.csv"
        [ -n "${{ inputs.report-output }}" ] && export REPORT_OUTPUT="${{ inputs.report-output }}" || export REPORT_OUTPUT="/tmp/report.md"
        echo "REPORT_OUTPUT=${REPORT_OUTPUT}" >> "$GITHUB_ENV"
        cd $(cat /tmp/working-directory.txt)
        echo "WORKING DIRECTORY: $PWD"
        ls -al
        echo ""
        if [ -f "${{ inputs.config-file }}" ]; then
          shim-review-bot review --config "${{ inputs.config-file }}" --source-root "/tmp/source" --build-script "${BUILD_SCRIPT}" --output-file "${BUILD_OUTPUT_FILE}" --sbat "${SBAT_FILE}" --vendor-cert "${VENDOR_CERT}" --report-output "/tmp/report-generated.md"
        else
          shim-review-bot review --source-root "/tmp/source" --build-script "${BUILD_SCRIPT}" --output-file "${BUILD_OUTPUT_FILE}" --sbat "${SBAT_FILE}" --vendor-cert "${VENDOR_CERT}" --report-output "/tmp/report-generated.md"
        fi
        touch ${REPORT_OUTPUT}
        [ -n "${{ inputs.build-script }}" ] && echo "Used Build Script: ${{ inputs.build-script }}" >> ${REPORT_OUTPUT} || echo "Used Dockerfile: ${{ inputs.source }}/Dockerfile" >> ${REPORT_OUTPUT}
        cat /tmp/report-generated.md >> ${REPORT_OUTPUT}
    - id: report
      if: inputs.issue-number != ''
      uses: peter-evans/create-or-update-comment@v3.0.2
      with:
        comment-id: "${{ steps.comment.outputs.comment-id }}"
        edit-mode: append
        body-path: "${{ env.REPORT_OUTPUT }}"
    - name: Failed report
      if: failure()
      uses: peter-evans/create-or-update-comment@v3.0.2
      with:
        comment-id: "${{ steps.comment.outputs.comment-id }}"
        edit-mode: append
        body: |
          Action failed